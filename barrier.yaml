AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Welcome to Aegis Combat Systems. Secret Key addition coming.
Parameters:
  Email:
      Type: String
      Description: Simple notification service will send you an actionable confirmation.
      Default: xxxxxxxxx@xxx.xxx
Resources:
  AegisInstanceSystems:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref Email
          Protocol: "email"
  AegisTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sns:Publish'
            Resource: '*'
      Topics:
        - !Ref AegisInstanceSystems
  AegisCombatSystem:
    Type: AWS::Events::Rule
    Properties:
      Description: "root user detection system"
      EventPattern:
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          userIdentity:
            type:
              - "Root"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: "AegisInstanceSystems"
          Id: "OpsTopic"
          InputTransformer:
            InputPathsMap:
              MFA: "$.detail.additionalEventData.MFAUsed"
              action: "$.detail.eventName"
              arn: "$.detail.userIdentity.arn"
              loginrate: "$.detail.responseElements.ConsoleLogin"
              mobile: "$.detail.additionalEventData.MobileVersion"
              region: "$.detail.awsRegion"
              sector: "$.detail.additionalEventData.LoginTo"
              sourceip: "$.detail.sourceIPAddress"
              time: "$.detail.eventTime"
              user: "$.detail.userIdentity.userName"
              userAgent: "$.detail.userAgent"
            InputTemplate: |
              "Aegis Secure Combat Systems has detected an Root user API event."
              "API call: <action>"
              "Source IP: <sourceip>"
              "User Agent Detected: <userAgent>"
              "ARN: <arn>"
              "Region: <region>"
              "Time(UTC): <time>"
              "-------------------------------"
              "Login Information if applicable"
              "MFA status <MFA>"
              "Mobile Version: <mobile>"
              "Sector: <sector>"
              "Status: <loginrate>."

  ConfigurationRecorder:
    Type: "AWS::Config::ConfigurationRecorder"
    Properties:
      RoleARN:
        Fn::GetAtt:
          - "IamRoleForAwsConfig"
          - "Arn"
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  DeliveryChannel:
    Type: "AWS::Config::DeliveryChannel"
    Properties:
      S3BucketName:
        Ref: "S3BucketForAwsConfig"
  S3BucketForAwsConfig:
    Type: "AWS::S3::Bucket"
    Properties: {}
  IamRoleForAwsConfig:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSConfigRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "config.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "allow-access-to-config-s3-bucket"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - Fn::Join:
                      - ""
                      -
                        - Fn::GetAtt:
                            - "S3BucketForAwsConfig"
                            - "Arn"
                        - "/*"
                Condition:
                  StringLike:
                    s3:x-amz-acl: "bucket-owner-full-control"
              - Effect: "Allow"
                Action:
                  - "s3:GetBucketAcl"
                Resource:
                  Fn::GetAtt:
                    - "S3BucketForAwsConfig"
                    - "Arn"
  ConfigRule4:
    Type: "AWS::Config::ConfigRule"
    Properties:
      ConfigRuleName: "ec2-required-tags"
      Scope:
        ComplianceResourceTypes:
          - "AWS::EC2::Instance"
      Description: "Aegis Config rule that checks whether your resources have the special tags that you specify."
      InputParameters:
        tag1Key: "Name"
        tag1Value: "Secret"
      Source:
        Owner: "AWS"
        SourceIdentifier: "REQUIRED_TAGS"
    DependsOn:
      - "ConfigurationRecorder"
  RemediationForConfigRule4:
    Type: "AWS::Config::RemediationConfiguration"
    Properties:
      Automatic: true
      ConfigRuleName:
        Ref: "ConfigRule4"
      MaximumAutomaticAttempts: 5
      RetryAttemptSeconds: 60
      TargetId: "AWS-StopEC2Instance"
      TargetType: "SSM_DOCUMENT"
      TargetVersion: "1"
      Parameters:
        AutomationAssumeRole:
          StaticValue:
            Values:
              - Fn::GetAtt:
                  - "AutoRemediationIamRole"
                  - "Arn"
        InstanceId:
          ResourceValue:
            Value: "RESOURCE_ID"
  AutoRemediationIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
                - "events.amazonaws.com"
                - "ssm.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole"
      Policies: []
  AutomationPassRolePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "passAutomationRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "iam:PassRole"
            Resource:
              Fn::GetAtt:
                - "AutoRemediationIamRole"
                - "Arn"
      Roles:
        - Ref: "AutoRemediationIamRole"
Metadata: {}
Conditions: {}
